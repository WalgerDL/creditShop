# DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)

#========postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/normalize1
# Login username of the database.
spring.datasource.username=postgres
# Login password of the database.
spring.datasource.password=zz#~n3wf

#============Liquibase
#spring.liquibase.enabled=false
#spring.liquibase.enabled=true
#spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml

# JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)

# DDL mode. This is actually a shortcut for the "hibernate.hbm2ddl.auto" property. Defaults to "create-drop" when using an embedded database and no schema manager was detected. Otherwise, defaults to "none".
#spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto позволяет задать стратегию формирования БД на основе наших моделей, имеет разные значения (none, create, update и др.). update в данном случае значит, что таблицы БД и поля будут созданы на основе наших моделей и буду изменяться вместе с ними.
#spring.jpa.hibernate.ddl-auto=validate
#spring.jpa.hibernate.ddl-auto=create

# Whether to enable logging of SQL statements.
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Hibernate additional native properties to set on the JPA provider.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.properties.hibernate.current_session_context_class=thread
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#spring.jpa.properties.hibernate.format_sql=true
#spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

#====validator
spring.messages.basename=validation

#====jackson
spring.jackson.serialization.write-dates-as-timestamps=false

#======Kafka
#Kafka Topic
#message.topic.name=javacodegeeks
spring.kafka.bootstrap-servers=localhost:9092
#==producer
#spring.kafka.producer.bootstrap-servers=localhost:9092
#string.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#string.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
#==
spring.kafka.consumer.properties.spring.json.trusted.package=*
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
